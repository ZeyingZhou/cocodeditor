generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Profile {
  id          String       @id @db.Uuid
  email       String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teamMembers TeamMember[]
  ownedTeams  Team[]       @relation("TeamOwner")
}

model Team {
  id          String       @id @default(uuid())
  name        String
  description String?
  joinCode    String       @unique @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     String
  owner       Profile      @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]
  projects    Project[]
}

model TeamMember {
  id        String   @id @default(uuid())
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String
  profileId String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([teamId, profileId])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  files       File[]

  @@unique([teamId, name])
}

model File {
  id        String   @id @default(uuid())
  name      String
  content   String
  language  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}
